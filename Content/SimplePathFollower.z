enum SimpleLoopMode {Stop, Continue, Reverse}

class SimplePathFollower : ZilchComponent
{
    // Should we follow the path at all?
    [Property]
    var Active : Boolean = true;
    
    // The path resource to follow. This will be overriden by
    // the LevelPath property below if it exists.
    [Property]
    var Path : Path = Path.Find("DefaultPath");
    
    // The level path object to follow. If this object exists we will grab its path
    // resource and follow that instead of the Path specified above.
    [Property]
    var LevelPath : String = "LevelPath";
    
    // How fast will we move along the path. Currently we only move with a constant velocity.
    [Property]
    var Speed : Real = 5.0;
    
    // The local point that should follow along the path.
    [Property]
    var LocalFollowPoint : Real3 = Real3(0.0, 0.0, 0.0);
    
    // How we follow the path, primarily what we do when we reach the end.
    [Property]
    var LoopMode : SimpleLoopMode = SimpleLoopMode.Reverse;
    
    // Locally following a path means that we take the path and orient and
    // translate it so that it starts at our position and the first tangent
    // direction of the path is aligned with our current forward.
    [Property]
    var LocalFollow : Boolean = false;
    
    // How far along the current path we are. This can be modified
    // initially to start a certain distance along the path.
    [Property]
    var CurrentDistance : Real = 0.0;
    
    // Are we traveling forwards or backwards along the path? (1 or -1)
    [Property]
    var Direction : Real = 1.0;
    
    // The forward direction we had last frame. Used to smooth out rotations.
    var OldForward : Real3 = Real3(0.0, 1.0, 0.0);
    
    // Used to calculte the delta movement vector so that we can more easily perform local following.
    var PrevPoint : Real3 = Real3(0.0, 0.0, 0.0);
    // The rotation that takes us from the path's frame to our initial following frame.
    var InvPathRotation : Quaternion = Quaternion();
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.FindPath();
        
        // Grab the first point from the path along with its tangent direction
        var firstPoint = this.Path.SampleDistance(0.0);
        var startTangent = firstPoint.WorldTangent;
        // Also get our starting forward
        var startDir = this.Owner.Orientation.WorldForward;
        
        // To properly follow a path in local mode, we have to rotate the path
        // into our local frame. To do this we need to calculate the rotation
        // from our the path's starting tangent to our forward. We can do this by
        // calculating the axis angle rotation between these two vectors.
        var axis = Math.Cross(startTangent, startDir);
        var angle = Math.ACos(Math.Dot(startTangent, startDir));
        axis = Math.Normalize(axis);
        this.InvPathRotation = Math.ToQuaternion(axis, angle);
        
        // To smooth out the rotation, we need to store the first forward direction we had,
        // however if we are in local follow mode we need to take that first direction and
        // rotate it back into our local frame.
        var forward = firstPoint.WorldTangent;
        if(this.LocalFollow == true)
        {
            forward = Math.Transform(forward, this.InvPathRotation);
        }
        this.OldForward = forward;
        // Also cache the first point so we can properly update with delta movements
        this.PrevPoint = firstPoint.WorldPoint;
    }
    
    function FindPath()
    {
        // If our level path object exists and has a level
        // path component then grab the path from it.
        var cog = this.Space.FindObjectByName(this.LevelPath);
        if(cog != null)
        {
            var levelPath = cog.LevelPath;
            if(levelPath != null)
            {
                this.Path = levelPath.Path;
            }
        }
    }
    
    function OnLogicUpdate(updateEvent : UpdateEvent)
    {
        if(this.Active == false)
        {
            return;
        }
        
        // Update how far along the path we are
        this.UpdateDistance(updateEvent.Dt);
        
        var sampleData = this.Path.SampleDistance(this.CurrentDistance);
        
        var worldFollowOffset = this.Owner.Transform.TransformNormal(this.LocalFollowPoint);
        
        // Calculate where our object should be so that our follow point is on the path
        var pos = sampleData.WorldPoint - worldFollowOffset;
        // Reverse our forward if we're traveling backwards on the path
        var forward = sampleData.WorldTangent * this.Direction;
        
        // If we're following a path in local mode, we have to update the forward and
        // the position to be relative instead of where the path actually is
        if(this.LocalFollow)
        {
            // Calculate the vector that takes us from where we were to our new position
            var delta = pos - this.PrevPoint;
            this.PrevPoint = pos;
            
            // Now since we're in a local follow mode, we can't just
            // move to the new position we calculated. Instead, take the
            // delta movement and the forward vector and rotate them back
            // into the "local" space for following.
            delta = Math.Transform(delta, this.InvPathRotation);
            forward = Math.Transform(forward, this.InvPathRotation);
            pos = delta + this.Owner.Transform.WorldTranslation;
        }
        
        this.Owner.Transform.Translation = pos;
        
        this.UpdateOrientation(forward);
    }
    
    function UpdateOrientation(forward : Real3)
    {
        var currForward = Math.Slerp(this.OldForward, forward, 0.1);
        this.Owner.Orientation.LookAtDirectionWithUp(currForward, Real3(0.0, 0.0, 1.0));
        this.OldForward = currForward;
    }
    
    function UpdateDistance(dt : Real)
    {
        this.CurrentDistance += dt * this.Speed * this.Direction;
        
        var totalDistance = this.Path.TotalDistance;
        
        // If we reverse when we reach the end of the path
        if(this.LoopMode == SimpleLoopMode.Reverse)
        {
            // If we're at the end of the path then reverse our direction and properly
            // accumulate the remaining distance we went past the end of the path
            if(this.CurrentDistance > totalDistance)
            {
                this.Direction = -1.0;
                this.CurrentDistance -= (this.CurrentDistance - totalDistance) * 2.0;
            }
            // Otherwise if we went off the beginning do the same thing
            else if(this.CurrentDistance < 0.0)
            {
                this.Direction = 1.0;
                this.CurrentDistance *= -1.0;
            }
        }
        // If we stop when we reach the end then just clamp our
        // distance to the max distance of the path
        else if(this.LoopMode == SimpleLoopMode.Stop)
        {
            this.CurrentDistance = Math.Clamp(this.CurrentDistance, 0.0, totalDistance);
        }
        else if(this.LoopMode == SimpleLoopMode.Continue)
        {
            this.CurrentDistance = Math.FMod(this.CurrentDistance, totalDistance);
        }
    }
}